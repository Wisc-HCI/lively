"use strict";(self.webpackChunklively_documentation=self.webpackChunklively_documentation||[]).push([[5316],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={},a="Solver",l={unversionedId:"API/Solver/index",id:"API/Solver/index",title:"Solver",description:"Introduction",source:"@site/docs/API/Solver/index.mdx",sourceDirName:"API/Solver",slug:"/API/Solver/",permalink:"/docs/API/Solver/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/API/"},next:{title:"Initialization",permalink:"/docs/API/Solver/initialization"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Workflow",id:"workflow",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"solver"},"Solver"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Solver")," contains the core functionality of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Lively")," toolkit.\nYou can think of it as a single entry point for specifying behaviors and receiving robot instructions. "),(0,o.kt)("mermaid",{value:"\ngraph LR\n    G[Goals] --\x3e SFn{{solve}}\n    G -.- O\n    W[Weights] --\x3e SFn\n    T[Time] --\x3e SFn\n    C[Shapes] --\x3e SFn\n    subgraph Solver\n    O[Objectives]\n    SFn\n    end\n    subgraph S[State]\n    SFn --\x3e L[Link Transforms]\n    SFn --\x3e J[Joint Values]\n    SFn --\x3e P[Proximity]\n    SFn --\x3e M[Center of Mass]\n    end"}),(0,o.kt)("h2",{id:"workflow"},"Workflow"),(0,o.kt)("p",null,"Generally, the usage of the solver involves a regular sequence of steps.\nTo begin, the Solver is ",(0,o.kt)("a",{parentName:"p",href:"./initialization"},(0,o.kt)("inlineCode",{parentName:"a"},"initialized"))," with a set of parameters,\nincluding the robot's URDF, a set of ",(0,o.kt)("a",{parentName:"p",href:"../Objectives/"},(0,o.kt)("inlineCode",{parentName:"a"},"objectives")),",\ninitial joint ",(0,o.kt)("a",{parentName:"p",href:"../state"},(0,o.kt)("inlineCode",{parentName:"a"},"state")),", and a description of the collision environment."),(0,o.kt)("p",null,"It is optional, but advised, to then execute the ",(0,o.kt)("a",{parentName:"p",href:"./Methods/collision_normalization"},(0,o.kt)("inlineCode",{parentName:"a"},"compute_average_distance_table")),"\nmethod to normalize the distances between links and the environment to improve the performance of the collision avoidance algorithm.\nNote, if proximity information from a previous run that was normalized is provided as part of the initialization\n",(0,o.kt)("a",{parentName:"p",href:"../state"},(0,o.kt)("inlineCode",{parentName:"a"},"state")),", it will re-use the normalization calculated there. "),(0,o.kt)("p",null,"Finally, the solver's ",(0,o.kt)("a",{parentName:"p",href:"./Methods/solve"},(0,o.kt)("inlineCode",{parentName:"a"},"solve"))," method can be run in a loop, such that each loop any change in goals\nis passed, and the new computed state is returned."),(0,o.kt)("mermaid",{value:"graph LR\n    A[Initialize] --\x3e|optionally| B(Compute Average Distances)\n    A --\x3e Solve\n    B --\x3e Solve\n    Solve --\x3e|in loop| Solve"}),(0,o.kt)("p",null,"In the following sections you will see how the solver is initialized, utilized, and structured."))}u.isMDXComponent=!0}}]);