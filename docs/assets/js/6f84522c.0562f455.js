"use strict";(self.webpackChunklively_documentation=self.webpackChunklively_documentation||[]).push([[4501],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=i,v=m["".concat(s,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(v,o(o({ref:t},p),{},{components:n})):a.createElement(v,o({ref:t},p))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),i=n(6010);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),i=n(7294),r=n(6010),o=n(2389),l=n(7392),s=n(7094),u=n(2466);const p="tabList__CuJ",m="tabItem_LNqP";function c(e){const{lazy:t,block:n,defaultValue:o,values:c,groupId:d,className:v}=e,b=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=c??b.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,l.l)(h,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===o?o:o??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==g&&!h.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:k}=(0,s.U)(),[N,_]=(0,i.useState)(g),j=[],{blockElementScrollPositionUntilNextRender:w}=(0,u.o5)();if(null!=d){const e=y[d];null!=e&&e!==N&&h.some((t=>t.value===e))&&_(e)}const S=e=>{const t=e.currentTarget,n=j.indexOf(t),a=h[n].value;a!==N&&(w(t),_(a),null!=d&&k(d,String(a)))},O=e=>{let t=null;switch(e.key){case"Enter":S(e);break;case"ArrowRight":{const n=j.indexOf(e.currentTarget)+1;t=j[n]??j[0];break}case"ArrowLeft":{const n=j.indexOf(e.currentTarget)-1;t=j[n]??j[j.length-1];break}}t?.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",p)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},v)},h.map((e=>{let{value:t,label:n,attributes:o}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>j.push(e),onKeyDown:O,onClick:S},o,{className:(0,r.Z)("tabs__item",m,o?.className,{"tabs__item--active":N===t})}),n??t)}))),t?(0,i.cloneElement)(b.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function d(e){const t=(0,o.Z)();return i.createElement(c,(0,a.Z)({key:String(t)},e))}},2671:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var a=n(7462),i=(n(7294),n(3905)),r=n(5488),o=n(5162);const l={sidebar_position:1},s="Initialization",u={unversionedId:"API/Solver/initialization",id:"API/Solver/initialization",title:"Initialization",description:"Configuring of Lively is centered on the Solver class, which you can instantiate with the following parameters:",source:"@site/docs/API/Solver/initialization.mdx",sourceDirName:"API/Solver",slug:"/API/Solver/initialization",permalink:"/docs/API/Solver/initialization",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docs",previous:{title:"Solver",permalink:"/docs/API/Solver/"},next:{title:"Methods",permalink:"/docs/category/methods"}},p={},m=[],c={toc:m};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"initialization"},"Initialization"),(0,i.kt)("p",null,"Configuring of Lively is centered on the ",(0,i.kt)("a",{parentName:"p",href:"../Solver"},(0,i.kt)("inlineCode",{parentName:"a"},"Solver"))," class, which you can instantiate with the following parameters:"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("strong",{parentName:"p"},"optional")," field can be left empty if the no specification is needed. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Solver")," will just use the default values for the optional parameters.")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Optional"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"urdf")),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"The string representation of XML format.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"objectives")),(0,i.kt)("td",{parentName:"tr",align:null},"look-up table of <string,",(0,i.kt)("a",{parentName:"td",href:"../Objectives"},(0,i.kt)("inlineCode",{parentName:"a"},"Objective")),"> key-value pairs"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"The initial objectives to the ",(0,i.kt)("inlineCode",{parentName:"td"},"Solver"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"root_bounds")),(0,i.kt)("td",{parentName:"tr",align:null},"list of (float,float)"),(0,i.kt)("td",{parentName:"tr",align:null},"yes"),(0,i.kt)("td",{parentName:"tr",align:null},"The list of hard limits on how much the base of the robot can move relative to the world frame.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"shapes")),(0,i.kt)("td",{parentName:"tr",align:null},"list of ",(0,i.kt)("a",{parentName:"td",href:"../Shapes"},(0,i.kt)("inlineCode",{parentName:"a"},"Shape"))," objects"),(0,i.kt)("td",{parentName:"tr",align:null},"yes"),(0,i.kt)("td",{parentName:"tr",align:null},"The initial environmental shapes.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"initial_state")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"../state"},(0,i.kt)("inlineCode",{parentName:"a"},"State"))," objects"),(0,i.kt)("td",{parentName:"tr",align:null},"yes"),(0,i.kt)("td",{parentName:"tr",align:null},"The initial state to the ",(0,i.kt)("inlineCode",{parentName:"td"},"Solver"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"max_retries")),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"yes"),(0,i.kt)("td",{parentName:"tr",align:null},"The maximum number of randomly initialized rounds allowed for each invocation of ",(0,i.kt)("inlineCode",{parentName:"td"},"solve"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"max_iterations")),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"yes"),(0,i.kt)("td",{parentName:"tr",align:null},"The number of maximum iterations per round within the optimization.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"collision_settings")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"../Info/CollisionSettingInfo"},(0,i.kt)("inlineCode",{parentName:"a"},"CollisionSettingInfo"))),(0,i.kt)("td",{parentName:"tr",align:null},"yes"),(0,i.kt)("td",{parentName:"tr",align:null},"The initial setting to ",(0,i.kt)("a",{parentName:"td",href:"../collision"},(0,i.kt)("inlineCode",{parentName:"a"},"Collision Avoidance")),".")))),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import {Solver} from "@people_and_robots/lively";\nlet solver = new Solver(\n  urdf = "<?xml version=\'1.0\' ?><robot name=\'panda\'>...</robot>", // Full urdf as a string\n  objectives = {\n          "eePosition": {\n            type: "PositionMatch",\n            name: "EE Position",\n            link: attachmentLink,\n            weight: 50,\n          },\n          "eeRotation": {\n            type: "OrientationMatch",\n            name: "EE Rotation",\n            link: attachmentLink,\n            weight: 25,\n          },\n          "collision": {\n            type: "CollisionAvoidance",\n            name: "Collision Avoidance",\n            weight: COLLISION_WEIGHT,\n          },\n   },\n  root_bounds = [\n      { value: basePose.position.x, delta: 0.0 },\n      { value: basePose.position.y, delta: 0.0 },\n      { value: basePose.position.z, delta: 0.0 }, // Translational\n      { value: baseEuler[0], delta: 0.0 },\n      { value: baseEuler[1], delta: 0.0 },\n      { value: baseEuler[2], delta: 0.0 }, // Rotational\n    ],\n  shapes = [{\n      type:"Box", //can be \'Cylinder\', \'Capsule\', or \'Sphere\'\n      name:"camera attachment",\n      frame: "panda_hand", // or \'world\'\n      physical: true,\n      x:0.5,y:0.5,z:0.2,\n      localTransform: {translation:[0.0,0.0,0.0],rotation:[0.0,0.0,0.0,1.0]} // [x, y, z, w] ordering for quaternion\n  }],\n  initial_state= {origin:{translation:[0,0,0],rotation:[1,0,0,0]},joints:{panda_joint1:0.0,panda_joint2:0.0}}, // Optional\n  only_core=False, // Only use this flag if you are not using liveliness objectives and want a slight speed-up.\n  max_retries=1, // Number of times the solution is attempted (default 1)\n  max_iterations=150, // Number of iterations per try (default 150)\n  collision_settings = {dMax : 0.3, r : 0.0, aMax : 2.0, timeBudget : 100, timed : true}\n);\n'))),(0,i.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'from lively import Solver, PositionMatchObjective, OrientationMatchObjective, SmoothnessMacroObjective, CollisionAvoidanceObjective, State, Transform, ScalarRange, BoxShape\nsolver = Solver(\n  urdf=\'<?xml version="1.0" ?><robot name="panda">...</robot>\', # Full urdf as a string\n  objectives={\n      "PositionMatchObjective" : PositionMatchObjective(name="EE Position",link="panda_hand",weight=50),\n      "OrientationMatchObjective" :  OrientationMatchObjective(name="EE Rotation",link="panda_hand",weight=25),\n      "SmoothnessMacroObjective":SmoothnessMacroObjective(name="General Smoothness",weight=10),\n      "CollisionAvoidanceObjective":CollisionAvoidanceObjective(name="Collision Avoidance",weight=10)\n      ...\n  }, \n  root_bounds=[\n      ScalarRange(value=0.0,delta=0.0),ScalarRange(value=0.0,delta=0.0),ScalarRange(value=0.0,delta=0.0), # Translational, (x, y, z)\n      ScalarRange(value=0.0,delta=0.0),ScalarRange(value=0.0,delta=0.0),ScalarRange(value=0.0,delta=0.0)  # Rotational, (r, p, y)\n  ],\n  shapes=[\n      BoxShape(name="Table",frame="world",physical=True,x=2,y=1,z=1.2,local_transform=Transform.isometry())\n  ], \n  initial_state=State(origin=Transform.identity(),joints={"panda_joint1":0.0,"panda_joint2":0.0,...}), # Optional\n  only_core=False, # Only use this flag if you are not using liveliness objectives and want a slight speed-up.\n  max_retries=1, # Number of times the solution is attempted (default 1)\n  max_iterations=150, # Number of iterations per try (default 150)\n  collision_settings = CollisionSettingInfo(\n      d_max = 0.3, \n      r = 0.0, \n      a_max = 2.0, \n      time_budget = 100, \n      timed = True))\n'))),(0,i.kt)(o.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use lively::lively::Solver;\nuse lively::objectives::core::base::CollisionAvoidanceObjective;\nuse lively::objectives::core::base::SmoothnessMacroObjective;\nuse lively::objectives::core::matching::PositionMatchObjective;\nuse lively::objectives::objective::Objective;\nuse lively::utils::goals::Goal;\nuse lively::utils::info::TransformInfo;\nuse lively::utils::shapes::*;\nuse std::fs;\n\nfn main(){\n let urdf_string =\n    fs::read_to_string("./ur3e.xml").expect("Something went wrong reading the file");\n let pos_match_obj =\n    PositionMatchObjective::new("EE Position".to_string(), 0.0, "tool0".to_string());\n let col_avoid_obj =\n    CollisionAvoidanceObjective::new("Collision Avoidance".to_string(), 20.0);\n let smooth_macro_obj = SmoothnessMacroObjective::new("Smoothness".to_string(), 30.0);\n let root_bounds: Vec<(f64, f64)> = vec![\n         (0.0, 0.0),\n         (0.0, 0.0),\n         (0.0, 0.0),\n         (0.0, 0.0),\n         (0.0, 0.0),\n         (0.0, 0.0),\n     ];\n let iso_1 = Isometry3::from_parts(\n         Translation3::new(\n             0.6497281999999998,\n             -0.24972819999999987,\n             0.050000000000000044,\n         ),\n         UnitQuaternion::from_quaternion(Quaternion::new(\n             0.0,\n             0.0,\n             -0.7069999677447771,\n             0.7072135784958345,\n         )),\n     );\n let box_1 = Shape::Box(BoxShape::new(\n         "box".to_string(),\n         "world".to_string(),\n         true,\n         0.5,\n         0.75,\n         0.5,\n         iso_1,\n     ));  \n let iso_2 = Isometry3::from_parts(\n         Translation3::new(\n             -0.7,\n             -0.44972819999999987,\n             -0.050000000000000044,\n         ),\n         UnitQuaternion::from_quaternion(Quaternion::new(\n             0.0,\n             0.0,\n             -0.7069999677447771,\n             0.7072135784958345,\n         )),\n     );\n let sphere_1 = Shape::Sphere(SphereShape::new(\n             "sphere".to_string(),\n             "world".to_string(),\n             true,\n             0.25,\n             iso_2,\n         ));\n let mut solver = Solver::new(\n         urdf_string,\n         objectives,\n         Some(root_bounds),\n         Some(vec![box_1,sphere_1]),\n         None, //initial_state\n         None, //max_retries\n         None, //max_iterations\n         None, //collision_settings\n     );\n}\n')))))}d.isMDXComponent=!0}}]);