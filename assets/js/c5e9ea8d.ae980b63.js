"use strict";(self.webpackChunklively_documentation=self.webpackChunklively_documentation||[]).push([[926],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>v});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,v=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(v,r(r({ref:t},c),{},{components:n})):a.createElement(v,r({ref:t},c))}));function v(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,r[1]=l;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),o=n(86010);const i={tabItem:"tabItem_Ymn6"};function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(i.tabItem,r),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>S});var a=n(87462),o=n(67294),i=n(86010),r=n(12466),l=n(16550),s=n(91980),u=n(67392),c=n(50012);function p(e){return function(e){return o.Children.map(e,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function d(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function v(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,o.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=d(e),[r,l]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[s,u]=v({queryString:n,groupId:a}),[p,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,c.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),b=(()=>{const e=s??p;return m({value:e,tabValues:i})?e:null})();(0,o.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),h(e)}),[u,h,i]),tabValues:i}}var b=n(72389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,r.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==l&&(p(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:r}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},r,{className:(0,i.Z)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":l===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=h(e);return o.createElement("div",{className:(0,i.Z)("tabs-container",g.tabList)},o.createElement(f,(0,a.Z)({},e,t)),o.createElement(y,(0,a.Z)({},e,t)))}function S(e){const t=(0,b.Z)();return o.createElement(w,(0,a.Z)({key:String(t)},e))}},18139:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>v,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var a=n(87462),o=(n(67294),n(3905)),i=n(74866),r=n(85162);const l={},s="Solving",u={unversionedId:"Tutorials/solving",id:"Tutorials/solving",title:"Solving",description:"Since Lively is still in beta, the design is subject to change and should not be considered final!",source:"@site/docs/Tutorials/solving.mdx",sourceDirName:"Tutorials",slug:"/Tutorials/solving",permalink:"/lively/docs/Tutorials/solving",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"Advanced Initialization",permalink:"/lively/docs/Tutorials/advanced_initialization"},next:{title:"Adding Liveliness",permalink:"/lively/docs/Tutorials/liveliness"}},c={},p=[],d={toc:p},m="wrapper";function v(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"solving"},"Solving"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Since Lively is still in beta, the design is subject to change and should not be considered final!")),(0,o.kt)("p",null,"We have also created examples in Javascript, Python, and Rust for solving. You can find the file by clicking the links in the table down below."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Language"),(0,o.kt)("th",{parentName:"tr",align:null},"Path"),(0,o.kt)("th",{parentName:"tr",align:null},"Command to run the example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Rust"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/Wisc-HCI/lively/blob/master/examples/rust_examples/solving_example.rs"},"link")),(0,o.kt)("td",{parentName:"tr",align:null},"cargo run --package lively --example solving_example")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Python"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/Wisc-HCI/lively/blob/master/examples/python_examples/solving_example.ipynb"},"link")),(0,o.kt)("td",{parentName:"tr",align:null},"run in the Jupyter Notebook")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Javascript"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/Wisc-HCI/lively/tree/master/examples/js_examples/solving"},"link")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"yarn build"),", ",(0,o.kt)("inlineCode",{parentName:"td"},"yarn dev"))))),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"jsx",label:"Live",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function InitializationExample(props) {\n  const [livelySolver, setLivelySolver] = useState(null);\n  const [robot, setRobot] = useState("panda");\n  const [robotState, setRobotState] = useState(null);\n  const [visualRobotState, setVisualRobotState] = useState(null);\n\n  useEffect(() => {\n    /* \n      Given that we are showing this example in a declarative\n      react context, we need to use the useEffect hook to execute\n      imperative (sequential) code. That means that if you are\n      writing standard javascript, your code will look like the\n      contents of the function in this \'useEffect\'.\n    */\n\n    // Instantiate a new solver\n    const newSolver = new lively.Solver(\n      urdfs.panda, // The urdf of the robot\n      {\n        // some objective examples. Notice for JavaScript, you do not need to import anything for objective. Simply construct an object\n        smoothness: {\n          name: "MySmoothnessObjective",\n          type: "SmoothnessMacro",\n          weight: 20,\n          joints: true,\n          origin: false,\n          links: true,\n        },\n        position: {\n          name: "MyPositionMatchObjective",\n          type: "PositionMatch",\n          link: "panda_hand",\n          weight: 15,\n        },\n        orientation: {\n          name: "MyOrientationMatchObjective",\n          type: "OrientationMatch",\n          link: "panda_hand",\n          weight: 10,\n        },\n        collision: {\n          name: "MyCollisionDetection",\n          type: "CollisionAvoidance",\n          weight: 3,\n        },\n        jointLimit: {\n          name: "MyJointLimit",\n          type: "JointLimits",\n          weight: 5,\n        },\n        jointMatch: {\n          name: "MyJointMatchFinger1",\n          type: "JointMatch",\n          weight: 5,\n          joint: "panda_finger_joint1",\n        },\n      }\n    );\n    newSolver.computeAverageDistanceTable();\n    \n    // Assign the solver to the value\n    setLivelySolver(newSolver);\n    // Run solve to get a solved state\n    const newState = newSolver.solve({}, {}, 0.0);\n    // Update the solver\'s current state\n    setRobotState(newState);\n    setVisualRobotState(newState);\n\n    const updateSolver = () => {\n      if (newSolver) {\n        const d = new Date();\n        let time = d.getTime(); // Get the time used in Math.sin\n        let goal = {\n          // An goal example with defined Translation and Rotation\n          position: {\n            Translation: [\n              0.0,\n              0.5,\n              Math.sin(time / 1000) / 5 + 0.5, // The sin function alternating between -1 and 1 to have the robot to swing back and forth along the z-axis\n            ],\n          },\n          orientation: {\n            Rotation: [0.0, 0.707, 0.0, 0.0], // A defined Rotation to make the gripper facing downward\n          },\n          jointMatch: {\n            Scalar: 0.02,\n          },\n        };\n        const newState = newSolver.solve(goal, {}, time / 1000); // Pass the new goal into solve function\n        // Update the solver\'s current state\n        setRobotState(newState);\n      }\n    };\n\n    const interval = setInterval(updateSolver, 1000 / 30); // Update the solver 30fps\n\n    return () => {\n      // Provide a function to clear previous values\n      setLivelySolver(null);\n      setRobotState(null);\n      setVisualRobotState(null);\n      clearInterval(interval);\n    };\n  }, [robot]); // Rerun this code if the robot changes\n\n  return (\n    <div>\n      <RobotViewer\n        state={robotState}\n        links={livelySolver ? livelySolver.links : []}\n      />\n      <Button\n        active={robot === "panda"}\n        onClick={() => setVisualRobotState(robotState)}\n      >\n        Update State\n      </Button>\n      <Tree label="state" data={visualRobotState} />\n    </div>\n  );\n}\n'))),(0,o.kt)(r.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { panda, ur3e } from './urdfs.js';\nimport { Solver } from '@people_and_robots/lively';\n\nconst initialRootBounds = [\n  // An exmaple of root bounds\n  { value: 0.0, delta: 0.0 },\n  { value: 0.25, delta: 0.0 },\n  { value: 0.5, delta: 0.0 },\n  { value: 0.0, delta: 0.0 },\n  { value: 0.0, delta: 0.0 },\n  { value: 0.0, delta: 0.0 },\n];\n\nconst initialObjectives = {\n  // some objective examples. Notice for JavaScript, you do not need to import anything for objective. Simply construct an object\n  smoothness: {\n    name: 'MySmoothnessObjective',\n    type: 'SmoothnessMacro',\n    weight: 20,\n    joints: true,\n    origin: false,\n    links: true,\n  },\n  position: {\n    name: 'MyPositionMatchObjective',\n    type: 'PositionMatch',\n    link: 'panda_hand',\n    weight: 15,\n  },\n  orientation: {\n    name: 'MyOrientationMatchObjective',\n    type: 'OrientationMatch',\n    link: 'panda_hand',\n    weight: 10,\n  },\n  collision: {\n    name: 'MyCollisionDetection',\n    type: 'CollisionAvoidance',\n    weight: 3,\n  },\n  jointLimit: {\n    name: 'MyJointLimit',\n    type: 'JointLimits',\n    weight: 5,\n  },\n  jointMatch: {\n    name: 'MyJointMatchFinger1',\n    type: 'JointMatch',\n    weight: 5,\n    joint: 'panda_finger_joint1',\n  },\n};\n\nconst initialEnvShapes = [\n  {\n    type: 'Cylinder', // The Cylinder here is an example of static environmental shape. This shape will be not able to be moved or deleted.\n    name: 'pill',\n    frame: 'world',\n    physical: true,\n    length: 0.3,\n    radius: 0.2,\n    localTransform: {\n      translation: [-0.8, 0.0, 0.1],\n      rotation: [1.0, 0.0, 0.0, 0.0],\n    }, // [x, y, z, w] ordering for quaternion\n  },\n];\n\nconst collision_settings = {\n  // This is an example of customized collision_settings\n  dMax: 0.1,\n  r: 0.0,\n  aMax: 2.0,\n  timeBudget: 100,\n  timed: false,\n};\n\nconst newSolver = new Solver(\n  panda,\n  initialObjectives,\n  initialRootBounds,\n  initialEnvShapes,\n  null,\n  null,\n  null,\n  collision_settings\n);\n\nnewSolver.computeAverageDistanceTable();\nconst d = new Date();\nlet time = d.getTime(); // Get the time used in Math.sin\nlet goal = {\n  // An goal example with defined Translation and Rotation\n  position: {\n    Translation: [\n      0.0,\n      0.5,\n      Math.sin(time / 1000) / 5 + 0.5, // The sin function alternating between -1 and 1 to have the robot to swing back and forth along the z-axis\n    ],\n  },\n  orientation: {\n    Rotation: [0.0, 0.707, 0.0, 0.0], // A defined Rotation to make the gripper facing downward\n  },\n  jointMatch: {\n    Scalar: 0.02,\n  },\n};\nconst newState = newSolver.solve(goal, {}, time / 1000);\n\ndocument.querySelector('#app').innerHTML = `\n  <div>\n   ${JSON.stringify(newState)}\n  </div>`;\n\nconsole.log(newState);\n"))),(0,o.kt)(r.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'from lively import Solver, SmoothnessMacroObjective\n\n# Instantiate a new solver\nsolver = Solver(\n  urdf=\'<?xml version="1.0" ?><robot name="panda">...</robot>\', # Full urdf as a string\n  objectives={\n      # An example objective (smoothness macro)\n      "smoothness":SmoothnessMacroObjective(name="MySmoothnessObjective",weight=5)\n  }\n)\n\n# Run solve to get a solved state\nstate = solver.solve({},{},0.0)\n# Log the initial state\nprint(state)\n'))),(0,o.kt)(r.Z,{value:"rs",label:"Rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use lively::lively::Solver;\nuse lively::objectives::core::base::SmoothnessMacroObjective;\nuse lively::objectives::objective::Objective;\nuse std::collections::HashMap;\nuse std::fs;\n\nfn main() {\n    let mut objectives: HashMap<String, Objective> = HashMap::new();\n    // Add a Smoothness Macro Objective\n    objectives.insert(\n        "smoothness".into(),\n        // An example objective (smoothness macro)\n        Objective::SmoothnessMacro(SmoothnessMacroObjective::new("MySmoothnessObjective".to_string(), 5.0, true,false,false))\n    );\nlet data = fs::read_to_string("./tests/basic.xml").expect("Something went wrong reading the file");\nlet mut solver = Solver::new(\n    data.clone(), // Full urdf as a string\n    objectives, //objectives\n    None, //root_bounds\n    None, //shapes\n    None, //initial_state\n    None, //max_retries\n    None, //max_iterations\n    None); //collision_settings\n  // Run solve to get a solved state\n  let state = solver.solve(\n    HashMap::new(), // empty goals hashmap\n    HashMap::new(), // empty weights hashmap\n    0.0, // time\n    None //shape_update\n  );\n  // Log the initial state\n  println!("{:?}",state);\n\n}\n\n')))))}v.isMDXComponent=!0}}]);