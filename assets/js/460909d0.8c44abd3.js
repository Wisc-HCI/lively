"use strict";(self.webpackChunklively_documentation=self.webpackChunklively_documentation||[]).push([[4146],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},b="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),b=c(n),m=r,p=b["".concat(l,".").concat(m)]||b[m]||f[m]||i;return n?a.createElement(p,o(o({ref:t},u),{},{components:n})):a.createElement(p,o({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[b]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>O});var a=n(87462),r=n(67294),i=n(86010),o=n(12466),s=n(16550),l=n(91980),c=n(67392),u=n(50012);function b(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function f(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??b(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function d(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=f(e),[o,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[l,c]=p({queryString:n,groupId:a}),[b,d]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),h=(()=>{const e=l??b;return m({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),d(e)}),[c,d,i]),tabValues:i}}var h=n(72389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:b}=(0,o.o5)(),f=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==s&&(b(t),l(a))},m=e=>{let t=null;switch(e.key){case"Enter":f(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:f},o,{className:(0,i.Z)("tabs__item",v.tabItem,o?.className,{"tabs__item--active":s===t})}),n??t)})))}function j(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=d(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",v.tabList)},r.createElement(g,(0,a.Z)({},e,t)),r.createElement(j,(0,a.Z)({},e,t)))}function O(e){const t=(0,h.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},17081:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>b});var a=n(87462),r=(n(67294),n(3905)),i=n(74866),o=n(85162);const s={},l="Adding Objectives",c={unversionedId:"Tutorials/adding_objectives",id:"Tutorials/adding_objectives",title:"Adding Objectives",description:"Since Lively is still in beta, the design is subject to change and should not be considered final!",source:"@site/docs/Tutorials/adding_objectives.mdx",sourceDirName:"Tutorials",slug:"/Tutorials/adding_objectives",permalink:"/lively/docs/Tutorials/adding_objectives",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"Customized Usage",permalink:"/lively/docs/category/customized-usage"},next:{title:"Adding Goals",permalink:"/lively/docs/Tutorials/adding_goals"}},u={},b=[],f={toc:b},m="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"adding-objectives"},"Adding Objectives"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Since Lively is still in beta, the design is subject to change and should not be considered final!")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Lively")," can be greatly extended through the development of additional ",(0,r.kt)("a",{parentName:"p",href:"../API/Objectives"},(0,r.kt)("inlineCode",{parentName:"a"},"objectives")),". In order to add your own new ",(0,r.kt)("a",{parentName:"p",href:"../API/Objectives"},(0,r.kt)("inlineCode",{parentName:"a"},"objectives")),", there are three files you will have to modify.\nIn the example below, an additional ",(0,r.kt)("inlineCode",{parentName:"p"},"CenterOfMassMatchObjective")," is created. Because the robot state already includes a vector representing the ",(0,r.kt)("a",{parentName:"p",href:"../API/state"},(0,r.kt)("inlineCode",{parentName:"a"},"center-of-mass")),"\nof the robot, it is straightforward to create a new ",(0,r.kt)("a",{parentName:"p",href:"../API/Objectives"},(0,r.kt)("inlineCode",{parentName:"a"},"objectives"))," of ",(0,r.kt)("inlineCode",{parentName:"p"},"CenterOfMassMatch"),",\nwhich could be useful in cases where the robot\u2019s balance must\nbe maintained, or as a way to center the robot near its base. The changes are made in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Wisc-HCI/lively/blob/master/src/lib.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"src/lib.rs")),",\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Wisc-HCI/lively/blob/master/src/objectives/objective.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"src/objectives/objective.rs")),", and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Wisc-HCI/lively/blob/master/src/objectives/core/matching.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"src/objectives/core/matching.rs")),". "),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"CenterOfMassMatchObjective")," is a type of ",(0,r.kt)("a",{parentName:"p",href:"/lively/docs/API/Objectives/matching"},(0,r.kt)("inlineCode",{parentName:"a"},"matching objective"))," and we make the change to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Wisc-HCI/lively/blob/master/src/objectives/core/matching.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"src/objectives/core/matching.rs")),". Depending on the type of ",(0,r.kt)("a",{parentName:"p",href:"../API/Objectives"},(0,r.kt)("inlineCode",{parentName:"a"},"objective"))," you want to make, you will have to make corresponding changes to "),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Wisc-HCI/lively/blob/master/src/objectives/core/base.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"src/objectives/core/base.rs"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Wisc-HCI/lively/blob/master/src/objectives/core/bounding.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"src/objectives/core/bounding.rs"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Wisc-HCI/lively/blob/master/src/objectives/core/matching.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"src/objectives/matching.rs"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Wisc-HCI/lively/blob/master/src/objectives/core/mirroring.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"src/objectives/core/mirroring.rs"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Wisc-HCI/lively/blob/master/src/objectives/liveliness/forces.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"src/objectives/liveliness/forces.rs"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Wisc-HCI/lively/blob/master/src/objectives/liveliness/perlin.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"src/objectives/liveliness/perlin.rs"))))),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"lib.rs",label:"src/lib.rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"    ...\n    m.add_class::<objectives::core::bounding::PositionBoundingObjective>()?;\n    m.add_class::<objectives::core::bounding::OrientationBoundingObjective>()?;\n    m.add_class::<objectives::core::bounding::JointBoundingObjective>()?;\n    // An example of additional objectives (CenterOfMassMatchingObjective)\n    m.add_class::<objectives::core::matching::CenterOfMassMatchObjective>()?;\n    // ------------------------------------------------------------------\n    m.add_class::<objectives::core::matching::PositionMatchObjective>()?;\n    m.add_class::<objectives::core::matching::OrientationMatchObjective>()?;\n    m.add_class::<objectives::core::matching::JointMatchObjective>()?;\n    m.add_class::<objectives::core::matching::DistanceMatchObjective>()?;\n    ...\n"))),(0,r.kt)(o.Z,{value:"objective.rs",label:"src/objectives/objective.rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    pub enum Objective {\n    // An example of additional objectives (CenterOfMassMatchingObjective)\n    CenterOfMassMatch(CenterOfMassMatchObjective),\n    //------------------------------------------\n    PositionMatch(PositionMatchObjective),\n    OrientationMatch(OrientationMatchObjective),\n    PositionLiveliness(PositionLivelinessObjective),\n    ...\n    }\n\n    impl Objective {\n        pub fn get_type(&self) -> String {\n        // Returns a string value for each variant. Useful in debugging.\n            match self {\n                // An example of additional objectives (CenterOfMassMatchingObjective)\n                Self::CenterOfMassMatch(_obj)=> return String::from("CenterOfMassObjective"),\n                //-------------------------------------------------------------------------\n                Self::PositionMatch(_obj) => return String::from("PositionMatchObjective"),\n                Self::OrientationMatch(_obj) => return String::from("OrientationnMatchObjective"),\n                ...\n                }\n        }\n        pub fn call(&self,v: &Vars,state: &State) -> f64 {\n            // A switch that passes along the `call` method to the inner objective.\n            match self {\n                // An example of additional objectives (CenterOfMassMatchingObjective)\n                Self::CenterOfMassMatch(obj) => obj.call(v,state),\n                //-----------------------------------------------\n                Self::PositionMatch(obj) => obj.call(v,state),\n                Self::OrientationMatch(obj) => obj.call(v,state),\n                ...\n                }\n        }\n        pub fn update(&mut self, time: f64) {\n        // For time-sensitive objectives, include them here.\n            match self {\n                 // An example of additional objectives (CenterOfMassMatchingObjective)\n                Self::CenterOfMassMatch(obj) => obj.update(time),\n                //----------------------------------------------\n                Self::PositionLiveliness(obj) => obj.update(time),\n                ...\n                }\n            }\n        pub fn set_weight(&mut self, weight: f64) {\n        // Set the weight for the inner objective\n            match self {\n                 // An example of additional objectives (CenterOfMassMatchingObjective)\n                Self::CenterOfMassMatch(obj) => obj.set_weight(weight),\n                //----------------------------------------------------\n                Self::PositionMatch(obj) => obj.set_weight(weight),\n                Self::OrientationMatch(obj) => obj.set_weight(weight),\n                Self::PositionLiveliness(obj) => obj.set_weight(weight),\n                ...\n                }\n            }\n        pub fn get_goal(&self) -> Option<Goal> {\n        // get the goal for the inner objective. Useful for debugging.\n            match self {\n                // An example of additional objectives (CenterOfMassMatchingObjective)\n                Self::CenterOfMassMatch(obj) => return Some(Goal::Translation(Translation3::from(obj.goal))),\n                //------------------------------------------------------------------------------------------\n                Self::PositionMatch(obj) => return Some(Goal::Translation(Translation3::from(obj.goal))),\n                Self::OrientationMatch(obj) => return Some(Goal::Rotation(obj.goal)),\n                ...\n                }\n            }\n        pub fn set_goal(&mut self, goal: &Goal) {\n            // Set the goal for the inner objective. This matches based on Objective and Goal variant.\n            match (goal,self) {\n             // An example of additional objectives (CenterOfMassMatchingObjective)\n            (Goal::Translation(translation_goal),Self::CenterOfMassMatch(obj)) => obj.set_goal(translation_goal.vector),\n            //---------------------------------------------------------------------------------------------------------\n            (Goal::Translation(translation_goal),Self::PositionMatch(obj)) => obj.set_goal(translation_goal.vector),\n            (Goal::Translation(translation_goal),Self::PositionMirroring(obj)) => obj.set_goal(translation_goal.vector),\n            ...\n            }\n        }\n\n        #[cfg(feature = "pybindings")]\n        impl IntoPy<PyObject> for Objective {\n        fn into_py(self, py: Python) -> PyObject {\n            match self {\n                // An example of additional objectives (CenterOfMassMatchingObjective)\n                Self::CenterOfMassMatch(obj) => obj.into_py(py),\n                //--------------------------------------------\n                Self::PositionMatch(obj) => obj.into_py(py),\n                Self::OrientationMatch(obj) => obj.into_py(py),\n                ...\n                }\n            }\n         }\n    }\n\n\n'))),(0,r.kt)(o.Z,{value:"matching.rs",label:"src/objectives/core/matching.rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// An example of additional objectives (CenterOfMassMatchingObjective)\n#[repr(C)]\n#[derive(Serialize, Deserialize, Clone, Debug, Default)]\n#[cfg_attr(feature = "pybindings", pyclass)]\npub struct CenterOfMassMatchObjective {\n    pub name: String,\n    pub weight: f64,\n    // Goal Value\n    #[serde(skip)]\n    pub goal: Vector3<f64>,\n}\n\nimpl CenterOfMassMatchObjective {\n    pub fn new(name: String, weight: f64) -> Self {\n        Self {\n            name,\n            weight,\n            goal: vector![0.0, 0.0, 0.0],\n        }\n    }\n}\n\nimpl Callable<Vector3<f64>> for CenterOfMassMatchObjective {\n    fn call(&self, _v: &Vars, state: &State) -> f64 {\n\n        let x_val = ((state.center_of_mass- self.goal).norm()).abs();\n        // println!("matching value is {:?}", groove_loss(x_val, 0., 2, 0.1, 10.0, 2));\n        return self.weight * groove_loss(x_val, 0., 2, 0.1, 10.0, 2);\n    }\n\n    fn set_goal(&mut self, goal: Vector3<f64>) {\n        self.goal = goal;\n    }\n\n    fn set_weight(&mut self, weight: f64) {\n        self.weight = weight;\n    }\n}\n\n#[cfg(feature = "pybindings")]\n#[pymethods]\nimpl CenterOfMassMatchObjective {\n    #[new]\n    pub fn from_python(name:String,weight:f64) -> Self {\n        CenterOfMassObjective::new(name,weight)\n    }\n\n    #[getter]\n    pub fn get_name(&self) -> PyResult<String> {\n        Ok(self.name.clone())\n    }\n\n    #[getter]\n    pub fn get_weight(&self) -> PyResult<f64> {\n        Ok(self.weight.clone())\n    }\n\n}\n\n//---------------------------------------------------------\n')))))}p.isMDXComponent=!0}}]);