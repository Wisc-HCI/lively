"use strict";(self.webpackChunklively_documentation=self.webpackChunklively_documentation||[]).push([[410],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",v={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,h=d["".concat(s,".").concat(m)]||d[m]||v[m]||a;return t?i.createElement(h,l(l({ref:n},u),{},{components:t})):i.createElement(h,l({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[d]="string"==typeof e?e:o,l[1]=r;for(var c=2;c<a;c++)l[c]=t[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>l});var i=t(67294),o=t(86010);const a={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:t,className:l}=e;return i.createElement("div",{role:"tabpanel",className:(0,o.Z)(a.tabItem,l),hidden:t},n)}},74866:(e,n,t)=>{t.d(n,{Z:()=>f});var i=t(87462),o=t(67294),a=t(86010),l=t(12466),r=t(16550),s=t(91980),c=t(67392),u=t(50012);function d(e){return function(e){return o.Children.map(e,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:o}}=e;return{value:n,label:t,attributes:i,default:o}}))}function v(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const i=(0,r.k6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(a),(0,o.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(i.location.search);n.set(a,e),i.replace({...i.location,search:n.toString()})}),[a,i])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,a=v(e),[l,r]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[s,c]=h({queryString:t,groupId:i}),[d,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,a]=(0,u.Nk)(t);return[i,(0,o.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:i}),p=(()=>{const e=s??d;return m({value:e,tabValues:a})?e:null})();(0,o.useLayoutEffect)((()=>{p&&r(p)}),[p]);return{selectedValue:l,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);r(e),c(e),b(e)}),[c,b,a]),tabValues:a}}var p=t(72389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function w(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),v=e=>{const n=e.currentTarget,t=u.indexOf(n),i=c[t].value;i!==r&&(d(n),s(i))},m=e=>{let n=null;switch(e.key){case"Enter":v(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n)},c.map((e=>{let{value:n,label:t,attributes:l}=e;return o.createElement("li",(0,i.Z)({role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,key:n,ref:e=>u.push(e),onKeyDown:m,onClick:v},l,{className:(0,a.Z)("tabs__item",g.tabItem,l?.className,{"tabs__item--active":r===n})}),t??n)})))}function y(e){let{lazy:n,children:t,selectedValue:i}=e;if(t=Array.isArray(t)?t:[t],n){const e=t.find((e=>e.props.value===i));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},t.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==i}))))}function j(e){const n=b(e);return o.createElement("div",{className:(0,a.Z)("tabs-container",g.tabList)},o.createElement(w,(0,i.Z)({},e,n)),o.createElement(y,(0,i.Z)({},e,n)))}function f(e){const n=(0,p.Z)();return o.createElement(j,(0,i.Z)({key:String(n)},e))}},98742:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var i=t(87462),o=(t(67294),t(3905)),a=t(74866),l=t(85162);const r={},s="Social Robot",c={unversionedId:"Tutorials/social",id:"Tutorials/social",title:"Social Robot",description:"Since Lively is still in beta, the design is subject to change and should not be considered final!",source:"@site/docs/Tutorials/social.mdx",sourceDirName:"Tutorials",slug:"/Tutorials/social",permalink:"/lively/docs/Tutorials/social",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"Adding Liveliness",permalink:"/lively/docs/Tutorials/liveliness"},next:{title:"Environment Modeling",permalink:"/lively/docs/Tutorials/environment"}},u={},d=[],v={toc:d},m="wrapper";function h(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,i.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"social-robot"},"Social Robot"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Since Lively is still in beta, the design is subject to change and should not be considered final!")),(0,o.kt)("p",null,"We have also created examples in Javascript, Python, and Rust for liveliness. You can find the file by clicking the links in the table down below."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Language"),(0,o.kt)("th",{parentName:"tr",align:null},"Path"),(0,o.kt)("th",{parentName:"tr",align:null},"Command to run the example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Rust"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/Wisc-HCI/lively/blob/main/examples/rust_examples/social_robot_example.rs"},"link")),(0,o.kt)("td",{parentName:"tr",align:null},"cargo run --package lively --example liveliness_example")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Python"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/Wisc-HCI/lively/blob/main/examples/python_examples/social_robot_example.ipynb"},"link")),(0,o.kt)("td",{parentName:"tr",align:null},"run in the Jupyter Notebook")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Javascript"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/Wisc-HCI/lively/tree/main/examples/js_examples/social_robot"},"link")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"yarn build"),", ",(0,o.kt)("inlineCode",{parentName:"td"},"yarn dev"))))),(0,o.kt)(a.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"jsx",label:"Live",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function InitializationExample(props) {\n  const l_arm_joints = {\n      LShoulderPitch: 0,\n      LShoulderRoll: 1.1,\n      LElbowYaw: -1.88,\n      LElbowRoll: -0.7,\n      LWristYaw: 0.9 ,\n      LHand: 1\n    };\n\n  const [livelySolver, setLivelySolver] = useState(null);\n  const [robot, setRobot] = useState("panda");\n  const [robotState, setRobotState] = useState(null);\n  const [visualRobotState, setVisualRobotState] = useState(null);\n\n  useEffect(() => {\n    /* \n      Given that we are showing this example in a declarative\n      react context, we need to use the useEffect hook to execute\n      imperative (sequential) code. That means that if you are\n      writing standard javascript, your code will look like the\n      contents of the function in this \'useEffect\'.\n    */\n\n    const newSolver = new lively.Solver(\n      urdfs.pepper, // The urdf of the robot\n      {\n        // some lively objective examples. Notice for JavaScript, you do not need to import anything for objective. Simply construct an object\n        smoothness: {\n          name: "MySmoothnessObjective",\n          type: "SmoothnessMacro",\n          weight: 25,\n          joints: true,\n          origin: false,\n          links: false,\n        },\n        collision: {\n          name: "MyCollisionDetection",\n          type: "CollisionAvoidance",\n          weight: .5,\n        },\n        jointLimit: {\n          name: "MyJointLimit",\n          type: "JointLimits",\n          weight: 5,\n        },\n        torsoPosition: {\n          name: "Torso Position",\n          type: "PositionMatch",\n          link: "torso",\n          weight: 10,\n        },\n        rHandPosition: {\n          name: "R Hand Position",\n          type: "PositionMatch",\n          link: "r_gripper",\n          weight: 10,\n        },\n        rHandOrientation: {\n          name: "R Hand Orientation",\n          type: "OrientationMatch",\n          link: "r_gripper",\n          weight: 10,\n        },\n        headOrientation: {\n          name: "Gaze",\n          type: "OrientationMatch",\n          link: "Head",\n          weight: 7,\n        },\n        idleGaze: {\n          name: "Idle Gaze",\n          type: "OrientationLiveliness",\n          link: "Head",\n          weight: 20,\n          frequency: 10,\n        },\n        LShoulderPitch: {\n          name: "LShoulderPitch",\n          joint: "LShoulderPitch",\n          type: "JointMatch",\n          weight: 10,\n        },\n        LShoulderRoll: {\n          name: "LShoulderRoll",\n          joint: "LShoulderRoll",\n          type: "JointMatch",\n          weight: 10,\n        },\n        LElbowYaw: {\n          name: "LElbowYaw",\n          joint: "LElbowYaw",\n          type: "JointMatch",\n          weight: 10,\n        },\n        LElbowRoll: {\n          name: "LElbowRoll",\n          joint: "LElbowRoll",\n          type: "JointMatch",\n          weight: 10,\n        },\n        LWristYaw: {\n          name: "LWristYaw",\n          joint: "LWristYaw",\n          type: "JointMatch",\n          weight: 10,\n        },\n        LHand: {\n          name: "LHand",\n          joint: "LHand",\n          type: "JointMatch",\n          weight: 10,\n        },\n      }\n    );\n    // Normalize the collision bodies\n    newSolver.computeAverageDistanceTable();\n    // Assign the solver to the value\n    setLivelySolver(newSolver);\n    // Run solve to get a solved state\n    const newState = newSolver.solve({}, {}, 0.0);\n    // Update the solver\'s current state\n    setRobotState(newState);\n    setVisualRobotState(newState);\n\n    return () => {\n      // Provide a function to clear previous values\n      setLivelySolver(null);\n      setRobotState(null);\n      setVisualRobotState(null);\n    };\n  }, [robot]); // Rerun this code if the robot changes\n\n  useEffect(() => {\n    const updateSolver = () => {\n      if (livelySolver) {\n        const d = new Date();\n        let jointGoals =lodash.mapValues(l_arm_joints,(j)=>({Scalar:j}));\n        \n        let time = d.getTime(); // Get the time in milliseconds\n        jointGoals.LElbowRoll.Scalar = 0.21*Math.sin(time/1000) - 1.13;\n        let goals = {\n          torsoPosition: {\n            Translation: [0.0,0.0,0.85],\n          },\n          rHandPosition: {\n            Translation: [0.0,-0.216,0.546]\n          },\n          rHandOrientation: {\n            Rotation: [0.536,0.455,-0.435,0.5616]\n          },\n          idleGaze: {\n            Size: [0.01, 0.0, 0.1],\n          },\n          ...jointGoals\n        };\n        const newState = livelySolver.solve(goals, {}, time / 1000); // Pass the new goal into solve function\n        // Update the solver\'s current state\n        setRobotState(newState);\n        setVisualRobotState(newState);\n      }\n\n      //console.log(goal);\n    };\n\n    const interval = setInterval(updateSolver, 1000 / 60);\n\n    return () => {\n      //setShapesUpdate(null);\n      setRobotState(null);\n      setVisualRobotState(null);\n      clearInterval(interval);\n    };\n  }, [livelySolver]);\n\n  return (\n    <div>\n      <RobotViewer\n        state={robotState}\n        links={livelySolver ? livelySolver.links : []}\n      />\n      <Tree label="state" data={visualRobotState} />\n    </div>\n  );\n}\n'))),(0,o.kt)(l.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { pepper } from './urdfs.js';\nimport { Solver } from '@people_and_robots/lively';\nimport { mapValues } from 'lodash';\n\nconst initialRootBounds = [\n  // An exmaple of root bounds\n  { value: 0.0, delta: 0.0 },\n  { value: 0.25, delta: 0.0 },\n  { value: 0.5, delta: 0.0 },\n  { value: 0.0, delta: 0.0 },\n  { value: 0.0, delta: 0.0 },\n  { value: 0.0, delta: 0.0 },\n];\n\nconst l_arm_joints = {\n  LShoulderPitch: 0,\n  LShoulderRoll: 1.1,\n  LElbowYaw: -1.88,\n  LElbowRoll: -0.7,\n  LWristYaw: 0.9,\n  LHand: 1,\n};\n\nconst initialObjectives = {\n  // some lively objective examples. Notice for JavaScript, you do not need to import anything for objective. Simply construct an object\n  smoothness: {\n    name: 'MySmoothnessObjective',\n    type: 'SmoothnessMacro',\n    weight: 25,\n    joints: true,\n    origin: false,\n    links: false,\n  },\n  collision: {\n    name: 'MyCollisionDetection',\n    type: 'CollisionAvoidance',\n    weight: 0.5,\n  },\n  jointLimit: {\n    name: 'MyJointLimit',\n    type: 'JointLimits',\n    weight: 5,\n  },\n  torsoPosition: {\n    name: 'Torso Position',\n    type: 'PositionMatch',\n    link: 'torso',\n    weight: 10,\n  },\n  rHandPosition: {\n    name: 'R Hand Position',\n    type: 'PositionMatch',\n    link: 'r_gripper',\n    weight: 10,\n  },\n  rHandOrientation: {\n    name: 'R Hand Orientation',\n    type: 'OrientationMatch',\n    link: 'r_gripper',\n    weight: 10,\n  },\n  headOrientation: {\n    name: 'Gaze',\n    type: 'OrientationMatch',\n    link: 'Head',\n    weight: 7,\n  },\n  idleGaze: {\n    name: 'Idle Gaze',\n    type: 'OrientationLiveliness',\n    link: 'Head',\n    weight: 20,\n    frequency: 10,\n  },\n  LShoulderPitch: {\n    name: 'LShoulderPitch',\n    joint: 'LShoulderPitch',\n    type: 'JointMatch',\n    weight: 10,\n  },\n  LShoulderRoll: {\n    name: 'LShoulderRoll',\n    joint: 'LShoulderRoll',\n    type: 'JointMatch',\n    weight: 10,\n  },\n  LElbowYaw: {\n    name: 'LElbowYaw',\n    joint: 'LElbowYaw',\n    type: 'JointMatch',\n    weight: 10,\n  },\n  LElbowRoll: {\n    name: 'LElbowRoll',\n    joint: 'LElbowRoll',\n    type: 'JointMatch',\n    weight: 10,\n  },\n  LWristYaw: {\n    name: 'LWristYaw',\n    joint: 'LWristYaw',\n    type: 'JointMatch',\n    weight: 10,\n  },\n  LHand: {\n    name: 'LHand',\n    joint: 'LHand',\n    type: 'JointMatch',\n    weight: 10,\n  },\n};\n\nconst newSolver = new Solver(\n  pepper,\n  initialObjectives,\n  initialRootBounds,\n  null,\n  null,\n  null,\n  null,\n  null\n);\n\nnewSolver.computeAverageDistanceTable();\nconst d = new Date();\nlet jointGoals = mapValues(l_arm_joints, (j) => ({ Scalar: j }));\n\nlet time = d.getTime(); // Get the time in milliseconds\njointGoals.LElbowRoll.Scalar = 0.21 * Math.sin(time / 1000) - 1.13;\nlet goals = {\n  torsoPosition: {\n    Translation: [0.0, 0.0, 0.85],\n  },\n  rHandPosition: {\n    Translation: [0.0, -0.216, 0.546],\n  },\n  rHandOrientation: {\n    Rotation: [0.536, 0.455, -0.435, 0.5616],\n  },\n  idleGaze: {\n    Size: [0.01, 0.0, 0.1],\n  },\n  ...jointGoals,\n};\nconst newState = newSolver.solve(goals, {}, time / 1000);\n\ndocument.querySelector('#app').innerHTML = `\n  <div>\n   ${JSON.stringify(newState)}\n  </div>`;\n\nconsole.log(newState);\n\n"))),(0,o.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'from lively import Solver, Translation, Rotation,Transform, OrientationLivelinessObjective, OrientationMatchObjective, SmoothnessMacroObjective, PositionMatchObjective, JointMatchObjective, CollisionAvoidanceObjective, JointLimitsObjective, BoxShape, CollisionSettingInfo, ScalarRange\nfrom lxml import etree\n\n# Constructed CollisionAvoidance Objective ,BoxShape and configured Collision Setting\nbox = BoxShape(name="Table",frame="world",physical=True,x=2,y=1,z=1.2,translation = Translation(x=1.0, y =2.0, z=3.0),\nrotation = Rotation(x=0.0,y=0.0,z=0.0,w=1.0))\ncollision = CollisionSettingInfo(d_max = 0.1, r = 0.0, a_max = 2.0, time_budget = 100, timed = False)\n\n# Read the xml file into a string\nxml_file = \'../../tests/panda.xml\'\ntree = etree.parse(xml_file)\nxml_string = etree.tostring(tree).decode()\n#print(xml_string)\n# Instantiate a new solver\nsolver = Solver(\n  urdf=xml_string, # Full urdf as a string\n  objectives={\n      # An example objective (smoothness macro)\n      "smoothness":SmoothnessMacroObjective(name="MySmoothnessObjective",weight=25,joints=True,origin=False,links=True),\n      "collision": CollisionAvoidanceObjective(name="MyCollisionAvoidanceObjective", weight=0.5),\n      "jointLimit": JointLimitsObjective(name="MyJointLimitObjective", weight=5),\n      "torso Position": PositionMatchObjective(name="MyPositionMatchObjective", weight=10, link="torso"),\n      "positionMatch": PositionMatchObjective(name="R Hand Position", weight=10, link="r_gripper"),\n      "r hand orientation": OrientationMatchObjective(name="R Hand Orientation", weight=10, link="r_gripper"),\n      "headOrientation": OrientationMatchObjective(name="Gaze",link="Head",weight=7),\n      "idleGaze": OrientationLivelinessObjective(name="Idle Gaze", link= "Head", weight=20, frequency=10),\n      "LShoulderPitch": JointMatchObjective(name="LShoulderPitch", joint="LShoulderPitch", weight=10),\n      "LShoulderRoll": JointMatchObjective(name="LShoulderRoll", joint="LShoulderRoll", weight=10),\n      "LElbowYaw": JointMatchObjective(name="LElbowYaw", joint="LElbowYaw", weight=10),\n      "LElbowRoll": JointMatchObjective(name="LElbowRoll", joint="LElbowRoll", weight=10),\n      "LWristYaw": JointMatchObjective(name="LWristYaw", joint="LWristYaw", weight=10),\n      "LHand": JointMatchObjective(name="LHand", joint="LHand", weight=10),\n      \n  },\n  root_bounds=[\n      ScalarRange(value=0.0,delta=0.0),ScalarRange(value=0.0,delta=0.0),ScalarRange(value=0.0,delta=0.0), # Translational, (x, y, z)\n      ScalarRange(value=0.0,delta=0.0),ScalarRange(value=0.0,delta=0.0),ScalarRange(value=0.0,delta=0.0)  # Rotational, (r, p, y)\n  ],\n  shapes=[\n      box\n  ],\n  collision_settings = collision\n\n)\n\n# Run solve to get a solved state\nstate = solver.solve(goals= {"MyGoal1": Translation(x=1.0, y =2.0, z=3.0)},weights = {},time = 0.0)\n# Log the initial state\nprint(state.origin.as_dicts())\nprint(state.joints)\nprint(state.frames["panda_link0"])\nprint(state.proximity)\n'))),(0,o.kt)(l.Z,{value:"rs",label:"Rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use lively::lively::Solver;\nuse lively::objectives::core::base::SmoothnessMacroObjective;\nuse lively::objectives::core::base::CollisionAvoidanceObjective;\nuse lively::objectives::core::base::JointLimitsObjective;\nuse lively::objectives::core::matching::PositionMatchObjective;\nuse lively::objectives::core::matching::OrientationMatchObjective;\nuse lively::objectives::core::matching::JointMatchObjective;\nuse lively::objectives::liveliness::perlin::OrientationLivelinessObjective;\nuse lively::objectives::objective::Objective;\nuse std::collections::HashMap;\nuse std::fs;\n\nfn main() {\n    let mut objectives: HashMap<String, Objective> = HashMap::new();\n    // Add a Smoothness Macro Objective\n    objectives.insert(\n        "smoothness".into(),Objective::SmoothnessMacro(SmoothnessMacroObjective::new("MySmoothnessObjective".to_string(), 25.0, true,false,false))  \n    );\n    objectives.insert(\n        "collision".into(), Objective::CollisionAvoidance(CollisionAvoidanceObjective::new("MyCollisionAvoidanceObjective".to_string(), 0.5))\n    );\n    objectives.insert(\n        "jointLimit".into(), Objective::JointLimits(JointLimitsObjective::new("MyJointLimits".to_string(), 5.0))\n    );\n    objectives.insert(\n        "torsoPosition".into(), Objective::PositionMatch(PositionMatchObjective::new("Torso Position".to_string(), 10.0, "torso".to_string()))\n    );\n    objectives.insert(\n        "RHandPosition".into(), Objective::PositionMatch(PositionMatchObjective::new("R Hand Position".to_string(), 10.0 , "r_gripper".to_string()))\n    );\n    objectives.insert(\n        "RHandOrientation".into(), Objective::OrientationMatch(OrientationMatchObjective::new("R Hand Orientation".to_string(), 10.0 , "r_gripper".to_string()))\n    );\n    objectives.insert(\n        "Gaze".into(), Objective::OrientationMatch(OrientationMatchObjective::new("Gaze".to_string(), 7.0 , "Head".to_string()))\n    );\n    objectives.insert(\n        "Gaze".into(), Objective::OrientationMatch(OrientationMatchObjective::new("Gaze".to_string(), 7.0 , "Head".to_string()))\n    );\n    objectives.insert(\n        "Idle Gaze".into(), Objective::OrientationLiveliness(OrientationLivelinessObjective::new("OrientationLiveliness".to_string(), 0.0, "Head".to_string(), 10.0))\n    );\n    objectives.insert(\n        "LShoulderPitch".into(), Objective::JointMatch(JointMatchObjective::new("LShoulderPitch".to_string(),10.0, "LShoulderPitch".to_string()))\n    );\n    objectives.insert(\n        "LShoulderRoll".into(), Objective::JointMatch(JointMatchObjective::new("LShoulderRoll".to_string(),10.0, "LShoulderRoll".to_string()))\n    );\n    objectives.insert(\n        "LElbowYaw".into(), Objective::JointMatch(JointMatchObjective::new("LElbowYaw".to_string(),10.0, "LElbowYaw".to_string()))\n    );\n    objectives.insert(\n        "LElbowRoll".into(), Objective::JointMatch(JointMatchObjective::new("LElbowRoll".to_string(),10.0, "LElbowRoll".to_string()))\n    );\n    objectives.insert(\n        "LWristYaw".into(), Objective::JointMatch(JointMatchObjective::new("LWristYaw".to_string(),10.0, "LWristYaw".to_string()))\n    );\n    objectives.insert(\n        "LHand".into(), Objective::JointMatch(JointMatchObjective::new("LHand".to_string(),10.0, "LHand".to_string()))\n    );\n\n\n    \nlet data = fs::read_to_string("./tests/basic.xml").expect("Something went wrong reading the file");\nlet mut solver = Solver::new(\n    data.clone(), // Full urdf as a string\n    objectives, //objectives\n    None, //root_bounds\n    None, //shapes\n    None, //initial_state\n    None, //max_retries\n    None, //max_iterations\n    None); //collision_settings\n  // Run solve to get a solved state\n  let state = solver.solve(\n    HashMap::new(), // empty goals hashmap\n    HashMap::new(), // empty weights hashmap\n    0.0, // time\n    None //shape_update\n  );\n  // Log the initial state\n  println!("{:?}",state);\n}\n\n')))))}h.isMDXComponent=!0}}]);