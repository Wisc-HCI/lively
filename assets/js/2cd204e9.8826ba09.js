"use strict";(self.webpackChunklively_documentation=self.webpackChunklively_documentation||[]).push([[9257],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(6010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),r=n(7294),o=n(6010),l=n(2389),i=n(7392),s=n(7094),p=n(2466);const c="tabList__CuJ",u="tabItem_LNqP";function d(e){const{lazy:t,block:n,defaultValue:l,values:d,groupId:m,className:h}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=d??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,i.l)(v,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===l?l:l??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==g&&!v.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:k}=(0,s.U)(),[N,w]=(0,r.useState)(g),j=[],{blockElementScrollPositionUntilNextRender:O}=(0,p.o5)();if(null!=m){const e=y[m];null!=e&&e!==N&&v.some((t=>t.value===e))&&w(e)}const T=e=>{const t=e.currentTarget,n=j.indexOf(t),a=v[n].value;a!==N&&(O(t),w(a),null!=m&&k(m,String(a)))},C=e=>{let t=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const n=j.indexOf(e.currentTarget)+1;t=j[n]??j[0];break}case"ArrowLeft":{const n=j.indexOf(e.currentTarget)-1;t=j[n]??j[j.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},h)},v.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>j.push(e),onKeyDown:C,onClick:T},l,{className:(0,o.Z)("tabs__item",u,l?.className,{"tabs__item--active":N===t})}),n??t)}))),t?(0,r.cloneElement)(f.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,l.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},3005:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var a=n(7462),r=(n(7294),n(3905)),o=n(5488),l=n(5162);const i={},s="Resetting",p={unversionedId:"API/Solver/Methods/reset",id:"API/Solver/Methods/reset",title:"Resetting",description:"In both the Javascript and Python interfaces, the Solver class has a reset method that allows the user to reset the state of the solver given new objective, weights and a new robot state. In this case, the robot state only needs to supply the joints and origin field, as shown in the initialization example.",source:"@site/docs/API/Solver/Methods/reset.mdx",sourceDirName:"API/Solver/Methods",slug:"/API/Solver/Methods/reset",permalink:"/docs/API/Solver/Methods/reset",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Solving",permalink:"/docs/API/Solver/Methods/solve"},next:{title:"Collision Normalization",permalink:"/docs/API/Solver/Methods/collision_normalization"}},c={},u=[],d={toc:u};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"resetting"},"Resetting"),(0,r.kt)("p",null,"In both the Javascript and Python interfaces, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Solver")," class has a ",(0,r.kt)("inlineCode",{parentName:"p"},"reset")," method that allows the user to reset the ",(0,r.kt)("a",{parentName:"p",href:"../../state"},(0,r.kt)("inlineCode",{parentName:"a"},"state"))," of the solver given new ",(0,r.kt)("a",{parentName:"p",href:"../../Objectives/"},(0,r.kt)("inlineCode",{parentName:"a"},"objective")),", ",(0,r.kt)("inlineCode",{parentName:"p"},"weights")," and a new robot ",(0,r.kt)("a",{parentName:"p",href:"../../state"},(0,r.kt)("inlineCode",{parentName:"a"},"state")),". In this case, the robot ",(0,r.kt)("a",{parentName:"p",href:"../../state"},(0,r.kt)("inlineCode",{parentName:"a"},"state"))," only needs to supply the ",(0,r.kt)("inlineCode",{parentName:"p"},"joints")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"origin")," field, as shown in the ",(0,r.kt)("a",{parentName:"p",href:"../initialization"},(0,r.kt)("inlineCode",{parentName:"a"},"initialization"))," example."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"state")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"../../state"},(0,r.kt)("inlineCode",{parentName:"a"},"State"))),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"The new ",(0,r.kt)("a",{parentName:"td",href:"../../state"},(0,r.kt)("inlineCode",{parentName:"a"},"state"))," will replace the original one in the next cycle of calculation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"weights")),(0,r.kt)("td",{parentName:"tr",align:null},"a look-up table of <string,float>"),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"The new ",(0,r.kt)("inlineCode",{parentName:"td"},"weights")," will replace the original one in the next cycle of calculation")))),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"solver.reset(\n  // A new state with origin and joint properties\n  {\n    origin:{\n      translation:[0,0,0],\n      rotation:[1,0,0,0]\n    },\n    joints:{\n      panda_joint1:0.0,\n      panda_joint2:0.0,\n      ...\n    }\n  }, \n  // Weights\n  {\n    myObjective:0.5\n  }\n)\n"))),(0,r.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'solver.reset(\n  state=State(\n    origin=Transform.identity(),\n    joints={\n      "panda_joint1":0.0,\n      "panda_joint2":0.0,\n      ...\n    }\n  ),\n  weights={}\n)\n'))),(0,r.kt)(l.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut joints: HashMap<String,f64> = HashMap::new();\njoints.insert(\n  "panda_joint1".into(),\n  0.0\n);\njoints.insert(\n  "panda_joint2".into(),\n  0.0\n)\n...\n\nlet new_state: State = State::new(\n      Isometry3::identity(), // Origin\n      joints, // Joint Values\n      frames: HashMap::new(), // Ignored, so just pass in an empty map\n      proximity: vec![],\n      center_of_mass: vec![0.0,0.0,0.0] // Ignored, so just pass in a 3-vector of zeros\n);\n\nlet mut new_weights: HashMap<String,f64> = HashMap::new();\nnew_weights.insert(\n  "myObjective".into(),\n  0.5\n);\n\nsolver.reset(\n  new_state,\n  new_weights\n);\n')))))}m.isMDXComponent=!0}}]);